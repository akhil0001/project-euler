// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

import { EuclidPerf } from "./utils";


// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

//Brute force solution

const MAX_LIMIT = 40_00_000;
const p = EuclidPerf();
function sumOfEvenFiboNum():number{
    let a = 1;
    let b =2;
    let c = a+b;
    
    let sum = b;
    while (c<MAX_LIMIT){
        a = b;
        b = c;
        c = a+b;
        if(c%2 ===0){
            sum = sum +c;
        }    
    }
    return sum;
}

// console.log(sumOfEvenFiboNum());

// Efficient Solution
// To Understand this solution , use mathematical formula F(n) = F(n-1) + F(n-2)
// Formula for Even Sum -> E(n) = 4*E(n-1) + E(n-2) where n>2 , E(0) = 2, E(1) = 8

p.start();
function effSumOfEvenNumber(limit:number):number{
    let a = 2;
    let b = 8;
    let c =  4*b + a;
    let sum = a + b;
   while(c < limit) {
       a = b;
       b = c;
       sum = sum +c;
       c = 4*b + a;
    }    
    return sum;
}

console.log(effSumOfEvenNumber(MAX_LIMIT));
console.log(p.end());
